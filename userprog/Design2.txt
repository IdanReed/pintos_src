		           +--------------------------+
				       |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Zach Woods
Idan Reed

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Two structs in process:

  struct process_info
  {
    char * file_name;
    struct child * child_node;
    bool success;
    struct semaphore started;

    const char * usr_args_copy;
    struct list parsed_args;
  };

  struct usr_arg_info
  {
    struct list_elem elem;
    char * arg;
    int size;
    char * arg_vaddr;
  };

These structs are create in process_execute and passed through thread create
into start_process. This is so user arguments get processed all in one place but
then can be push on the stack later.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Argument passing is implemented in process_execute which parses the args and
passes them through thread_create. Then when the executable has been
successfully loaded, in load(), stack_usr_args() is called with the process_info
struct and the stack pointer.

The string pointers are pushed onto the stack in reverse order so argv[0] will
point to the first string and so on.

To prevent overflowing the input size is restricted to a page. There could be a
fix like allocating extra pages for arguments but it would likely increase
complexity a lot for not much gain.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

This is so the argument passing could be interupted but still work correctly.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

By not requiring the kernel to do this it can be simpler which makes this could
mean less bugs.

Also the shell could do some error checking like filename and arg length or
making sure an exceutable exists.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef int syscall_fn (uint32_t, uint32_t, uint32_t);

- This is the function type that is stored in the system call table.

static struct lock filesys_lock;

- This is the filesystem lock that makes sure only one process is accessing
the file system at a time.

struct syscall
{
  int arg_count;           /* Number of args syscall is expecting. Allows for correct number of bytes to be copied when calling */
  syscall_fn * function;   /* Syscall function pointer */
};

- Struct for a system call that also has the number of args the fn call is expecting
so we can copy the correct amount.

struct file_descriptor
  {
    struct list_elem elem;  /* List element */
    struct file * file;     /* Open file */
    uint32_t handle;        /* Unique identifier for this file descriptor */
  };

- The file descriptor struct that stores a file and its handle. Has list_elem so it
can be stored in files list.

struct thread
  {
  ...
    struct list children;               /* List of all child processes that this thread owns */
    struct child * child_node;          /* The struct that stores things like exit status and all the constructs used for process wait synch. */

    uint32_t current_desc;              /* Current descriptor count */
    struct list file_decs;              /* List of all file descriptors */
    struct file * exe_file;             /* The current executable file. Keep open to deny writing to it */
  ...

  }

struct child
  {
    struct list_elem elem;        /* List element */
    uint32_t exit_status;         /* Processes exit status */
    tid_t tid;                    /* Thread's thread id
    struct semaphore dead;        /* Signals if a process has died */

    struct lock lock;             /* Locks the ref_count member */
    uint8_t ref_count;            /* Counts how many references to child are left. 2 for both child and parent. 1 for either. 0 for none and need to free memory */
  };

- The child struct stores all synch constructs related to process_wait and also the exit status

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each thread has a running count of file descriptors. Each time a file is opened
that count is increased and given to the new file. The file descriptors are unique
to each process. So multiple threads can have files open with the same descriptors. This
shouldn't cause a problem because one of the requirements was that threads can only access
files that they've opened and don't need to touch any other threads' file descriptors.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

The user arguements are first checked to make sure they're valid. Then
they are copied into the kernel location. For larger buffers, the starting
byte and ending byte are checked for validity and then used. For strings,
we check each byte until a null terminator is found. Either we find a null
and return valid or we hit an invalid memory address and return invalid.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Our memory area checker calls pagedir_get_page twice, once for starting
and ending portions and therefore inspection would only occur twice. For
strings however, its called for each byte in the string. This is because we
don't know the end of the string and need to go until we find it. This could
surely be improved by just passing a size along with the string. Or using
a better way of finding string length. For 2 bytes of data, there are still
two calls to the pagedir_get_page function (one for start, one for end).

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

At the beginning, we copy the user args into the kernel. If this fails,
we instantly exit the syscall citing an error. After that, in each syscall,
we validate the user given memory first and then proceed with the implementation.
We never grab any locks before the checks take place. This way we don't need to keep
release the lock if an early exit occurs. This keeps the error handling mostly at the
top of each system call and makes the implemenation cleaner.
So essentially our strategy was to error check everything at the beginning and then
do the bulk of the system call. No intermixed error handling.

An example:
At the top of syscall_write, we check if the user memory area is valid:

  if (!is_valid_mem_area (buf, size))
  {
    /* Gave us a bad address */
    thread_exit();
  }

and exit if its not. Right after that the filesystem lock is acquired. This ensures
that we don't accidentally exit without releasing the lock.


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We have a process_info struct that is created in the parent and passed to the child process. 
This process_info struct has a semaphore which signlas once the 
child process has been created. This allows
the parent to wait on the semaphore, and the child to release the semaphore ensuring that
we wait untill the child process has been successfully/unsucessfully loaded. We also 
store a "success" field in the process info struct so that we can know if the loading failed. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

The synchronization is dealt with through a "dead" semaphore. When the child exits, it 
signals the dead semaphore. If the parent were to exit first, it waits on the child's dead
semaphore. If the child exited first, then the semaphore would be signaled and the parent 
would be able to just pass through on exit. The child_node (which stores the 'dead' semaphore) has a reference count that starts at 2. Once the child exits, the count decreases by one. Similarly with the parent. Once the count hits 0, the memory is freed. This ensures that when
both processes are done using it, the resources are deallocated. This works no matter who
exits first because its checked when either process exits.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It seemed like the two most critical points of memory are the two ends of the buffer. So
we decided to check either side so that we didn't have to check every byte. It also made
the syscall functions much simpler than trying to check it during the processing of the data.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages: Its simple. Its just a list of file handles and file pointers. To find a file,
we just need to search the list.

Disadvantages: If we used an absurd amount of files, we would eventually run out of unique file
handles. This would cause big issues. A UUID would maybe be better in this case but way less
simple. Also finding a file is linear time which could be improved with something like a 
hash table.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn't change it. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

I think it was a pretty good difficulty. It did take a decently long time, however.
Maybe a few tips on where to start with it might be helpful. The docs give some but
they don't really point you in much of a direction.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
Syscalls for sure gave me a large insight into OS design. I found it very valuable.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
Not sure, maybe just a few starting point hints or ideas of how to solve a problem 
would be good.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
