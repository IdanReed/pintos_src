
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Zach Woods    <zachwood0s@ksu.edu>
Idan Reed     <idee17@ksu.edu>
Austin Smith  <austin96@ksu.edu>
...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
? IDAN ?


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.
? IDAN ?

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
By having the linked list ordered by closest awake time, we only need to check until we hit the first 
waiting but not ready to wake up thread rather than searching the entire list. Most of the time, we're only checking the first thread.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Interupts were disabled when we're adding to the thread waitlist so that the current thread can added in the correct position. 
thread_block also required the interrupts to be disabled so we call that after adding to the waitlist.
We then re-enable interrupts.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
? WHO KNOWS ?


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?
? IDAN ?


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.

To keep track of the donations a thread has recieved, we added a donation list.
Then when calculating what the threads priority currently is, we take
the highest priority donator and see if that's higher than the "set" priority.
When the thread recieving the donation releases the lock it then removes
the donator, effectively reseting its "calculated" priority back to its "set"
priority.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Before unblocking the waiter, we sort the waiters list by priority.
This ensures that when we pop the last element off of the list, it's the
highest priority waiter and it gets unblocked first. A similar thing happens
for the condition variables. Because locks use semaphores to store the waiters,
the sorting works for both. 

Note: We initially inserted the waiters in order into the waiter list to 
      save sorting the list every time, but this caused an issue when
      a thread's priority was set during the execution of the program. 
      The waiter list was then unordered and when the front waiter was
      removed it was not guaranteed to be the highest priority thread.
      We decided to instead just sort the list before the element was
      removed.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When lock_acquire() is called, we first check to see if the lock is
currently being held by another thread. If so, we store the lock in 
the current thread for later reference. We then add the current thread
as a donator in the lock holder's donation list. This is so when the
holder's priority is recalculated, it will now be moved up (if needed)
in the priority queue. After that, the current thread tries to decrease
the semaphore. 

Everytime the current thread fails to decrease the semaphore
it will attempt to donate it's priority by calling thread_donate_priority().
thread_donate_priority() is where the chain donation is handled. In this function
we traverse the lock->holder to holder->waiting_on chain and give the current
thread's priority to each holder that has a lower priority 
(making sure not to pass the MAX_DONATE_DEPTH). 

Because the donations are kept in a list, when a donation is removed, 
the previous donations stay put. Then when the thread's priority is calculated, 
it sorts the donation list and takes the highest. 
Because of this, donations can be removed and the nested locks' 
priority will be readjusted to match the new priority.


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When lock_release is called it will first loop through all of the
current thread's donaters and remove them from it's donation list
if they were waiting on the current lock. This is because their donation is
no longer valid because the current thread is releasing the lock. 
After that the current thread's priority is recalculated using
the updated donation list. If it had no higher donaters than the one
waiting for this lock, it moves down in priority. 

We then increase the semaphore for the lock which unblocks the highest
priority waiter. The current thread then yields if it's priority is lower
than the highest ready thread. In this case, because a higher-priority thread
was waiting on the lock, the current thread yields and the higher priority
thread begins to run.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

When setting the priority, the thread will need to be moved to it's new
location in the priority queue. This could cause an issue if another 
thread is also attempting to move itself in the ready queue. The list operations
could be left incomplete and corrupt the ready queue. To solve this, we disable
interrupts when calculating the thread priority (which also moves the threads 
in the ready queue). This prevents donators from being added during the 
calcualtion as well as other threads being inserted into the ready queue.

Unfortunately, we do not believe locks could be used in our implementation
because the sema_up() method calls our thread_calculate_priority() function.
Using a lock would then cause us to infinetly cycle between releasing the lock
and calculating the priority. We would need the lock to have it's own special
method for modifying the ready queue, but that method would need some way
of avoiding a race condition as well. In the end, we figured that disabling
interrupts was the only way to solve this issue.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Intially we thought about just having a single donated priority in the 
thread. It would be set by another thread who wanted to donate its priority.
Then the holding thread would reset itself back to its base priority after
it released the donation. This had a major flaw that if two higher priority
threads with the same priority (e.g. 36 and 36) donated to a lower priority
thread (34), then when the lower priority thread released the lock, it wouldn't
know that there was a second donator with 36. The donation list implementation
solves this because it keeps track of all of the current donators, even if they
have the same priority.


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

